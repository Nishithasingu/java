TASK 1
** Nested if statement **
       A nested if statement is an if statement that is placed inside another if statement.
       This allows for multiple conditions to be evaluated sequentially, providing more complex decision-making capabilities.
Example:
 
class NestedIf
{
public static void main(String[] args) {
    int age = 25;
    boolean isStudent = false;
   if (age >= 18) {
        System.out.println("You are an adult.");
        if (isStudent) {
            System.out.println("You are a student.");
        } else {
            System.out.println("You are not a student.");
        }
    } else {
        System.out.println("You are a minor.");
    }
}
}
Output:
You are an adult.
You are not a student.


TASK 2

** When for loop becomes infinite **
   
  A for loop becomes infinite when its termination condition never evaluates to false. 
  This can happen if the termination condition is missing or if the loop's increment/decrement logic prevents the condition from being false.

Example:

class InfiniteForLoop
{
public static void main (String args[]){
                for(int i=10; i>0; i++){
                System.out.println("Hello");
   }
 }
}

OUTPUT:
Hello
Hello
Hello
Hello
.
.
.
.
.
.

TASK3
 **Findinng primenumbers upto n. n is an integer**

public class PrimeNumbers {
  public static void main(String[] args) {
    int num = 25;    // Define the upper limit
    int count;       // Initialize counter for divisibility checks
    for (int i = 1; i <= num; i++) {    // Iterate from 1 up to 'num' to identify prime numbers
      count = 0;    // Reset counter for each 'i'
                 // Check for divisibility from 2 up to i/2
    for (int j = 2; j <= i / 2; j++) {
        if (i % j == 0) {
          count++;  // Increment if 'i' is divisible by 'j'
          break;  // Exit loop if a divisor is found
        }
      }
       // If the count is 0, 'i' is prime
      if (count == 0) {
        System.out.println(i);  // Output the prime number
      }
    }
  }
}

OUTPUT:
2
3
5
7
11
13
17
19
23


TASK 4

  **Find the count of unique substrings**
Solution:
import java.util.HashSet;
public class UniqueSubstringsCount {
    public static void main(String[] args) {
        String input = "abcabc";
        int count = countUniqueSubstrings(input);
        System.out.println("Count of unique substrings: " + count);
    }
    public static int countUniqueSubstrings(String input) {
        HashSet<String> set = new HashSet<>();
        for (int i = 0; i < input.length(); i++) {
            for (int j = i + 1; j <= input.length(); j++) {
                String substring = input.substring(i, j);
                if (substring.length() > 1) {   // Exclude single character substrings
                    set.add(substring);
                }
            }
        }
        return set.size();
    }
}

Output:
Count of unique substring : 12

DAY 5  
Task1
**For Loop**

 Condition 1
     
     int i=90;
      for(;i>100;i++)
Output:
   The Condition is false the loop  will not execute at all, and there will be no output

Condition 2

      int i=90;
      for(;i>100;i--)
Output:
   The Condition is false the loop will not execute , and there will be no output

Condition 3
      
     int i=90;
      for(;;i++)
Output:
90
91
92
.
.
.
.
.

Condition 4
      
      int i=90;
      for(;i<100;i++)
Output:
90
91
92
93
94
95
96
97
98
99

Condition 5
     
     int i=90;
      for(;i<100;i+=2)
Output:
90
92
94
96
98

TASK 2
      int 456 ==>4+5=> 9+6=> 15 => 1+5=> 6
Solution:
 class SumOfDigits {
    public static void main(String[] args) {
        int n = 5641;
        while (n >= 10) {
            int sum = 0;
            while (n != 0) {
                sum += n % 10;
                n /= 10;
            }
            n = sum;
        }
        System.out.println("Final result: " + n);
    }
}
Output:
Final result:7


