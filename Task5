===================Task1 ====================
**Purpose of making constructor private**
Soln:
  The purpose of making a constructor private in Java is to restrict the instantiation of objects from outside the class. 
Example:
   public class Example {
       private Example() {   // Private constructor
       }
public static Example createInstance() {   // Factory method to create Example objects
    return new Example();
    }
} 

=============Task2==================
*****Can i make constr as final - impact ******

No , Illegal modifier for the constructor in type ConstrEg2; only public, protected & private are permitted

===================Task3===============
*****if a keep int nearby constr - what happens******
Soln:
public class ConstrEg2 {
   private int  ConstrEg2() {
    //This method must return a result of type int
}

===========TASK 4 and 5 ===============
*****class emp, in main meth - if a craete 5 obj - it should print 5 as o/p
                            if u creat 3 obj - it  should print 3 obj *****
Soln:
class Emp {
    private static int count = 0; // Static variable will get memory when class is created

    // Constructor increments the count each time an object is created
    Emp() {
        count++;
    }

    public static void main(String[] args) {
         for (int i = 0; i < 5; i++) {  // Create 5 objects of Emp class
            new Emp();
        }
        System.out.println("Number of objects created: " + count);   
    }
}

Output:
Number of objects created: 5

=========Task6============
***Write a Java program to create and display a unique three-digit number using 1, 2, 3, 4. Also count how many three-digit numbers are there.
123 143 132 134 241 234 132 342 .... ....**
Soln:
public class UniqueThreedigitNumber
{
public static void main (Strings args[]){
   int count=0;
     for(i=0; i<=4;i++)
     {
      for(j=0; j<=4;j++)
     {
      for(k=0; k<=4;k++)
     {
     if(i !=j && i!=k && j!=k ){
        int number = i* 100 + j*100 + k;
        system.out.print(number + "");
        count++;
       }
     }
   }
}
  system.out.println("\nThe number of three digit number" +count);
 }
}
Output:
123 124 132 134 142 143 213 214 231 234 241 243 312 314 321 324 341 342 412 413 421 423 431 432 
Total number of three-digit numbers: 24

==========Task7==============
***Write a Java program to print odd numbers from 1 to 99. Prints one number per line.***
Soln:
public class PrintOddNumbers
{
public static void main (Strings args[]){
for(i=1; i<=99; i++){
 if(i % 2 != 0){
system.out.println(i);
}
}
}
OutPut:
1
3
5
7
9
.
.
.
.
91
93
95
97
99
==========Task8=========
**Write a Java program that accepts an integer (n) and computes the value of n+nn+nnn. 
Sample Output: 
Input number: 5
5 + 55 + 555 **
Soln:
import java.util.Scanner;
public class ComputeValue {
    public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);  // Create a Scanner object for user input
     System.out.print("Input number: "); // Prompt the user to enter an integer
        int n = scanner.nextInt();
        scanner.close();// Close the scanner to prevent resource leak
        int nn = n * 10 + n;     // Compute nn and nnn
                             // n * 10 gives the tens place and add n again to get nn (e.g., if n is 5, then nn becomes 55)
        int nnn = nn * 10 + n;   // nn * 10 gives the hundreds place and add n again to get nnn (e.g., if nn is 55, then nnn becomes 555)

        System.out.println(n + " + " + nn + " + " + nnn + " = " + (n + nn + nnn));
    }
}
Output:
Input number: 5
5 + 55 + 555 = 615

==============Task9==========================
***Consider the following class:
public class IdentifyMyParts { public static int x = 7; public int y = 3; } *****
What are the class variables?
  Soln: X is a class variables.
  x is a class variable because it is declared with the static keyword.

What are the instance variables?
  Soln: Y is a instance variable.
  y is an instance variable because it is not declared with the static keyword.

What is the output from the following code:

public class IdentifyMyParts 
{ 
public static int x = 7; 
public int y = 3; 
public static void main(String args[])
{
IdentifyMyParts a = new IdentifyMyParts(); 
IdentifyMyParts b = new IdentifyMyParts(); 
a.y = 5; 
b.y = 6; 
a.x = 1; 
b.x = 2; //x is a static variable, it's the same for all instances  
System.out.println("a.y = " + a.y); 
System.out.println("b.y = " + b.y); 
System.out.println("a.x = " + a.x); 
System.out.println("b.x = " + b.x); 
System.out.println("IdentifyMyParts.x = " + IdentifyMyParts.x); //when you print the value of x, it reflects the last assigned value
}
}
Soln:
a.y = 5
b.y = 6
a.x = 2
b.x = 2
IdentifyMyParts.x = 2








