**TASK 1**

//float r=2.5f % 2; //0.5 --commented ----> how is this 0.5 comes as result?
  float r=2.5f / 2; //1.25
	System.out.println(r);

	float r=2.5f / 2; //1.25(takes quotient as result)
	System.out.println(r);
	float s=2.5f % 2; //0.5(takes remainder as result) 
   System.out.println(s);
Explanation : When you divide 2.5 by 2, you get 1 with a remainder of 0.5. In Java, the modulus operator(%) gives you the remainder of this division operation. 
	            So, when you do 2.5f % 2, it calculates the remainder, which is 0.5. Therefore, the result of 2.5f % 2 is 0.5.

**TASK 2**
	
Write a program for sum of digits
  23 ==> 2+3=5
  54 ==> 5+4=9
  33 ==> 3+3=9
  19 ==> 1+9=10=1+0 // no need for this
  //55,65 - no need
 int r=14; //use only literals  (hardcoded values)

 class SumOfDigits
{
    public static void main(String args[])
{
        int[] n = {23, 54, 33, 44, 81, 14};
        int Sum = 0;
         for (int num : n) {
            int a = num / 10;
            int b = num % 10;
            int sum = a + b;
            System.out.println("Sum of the digits " + num + " ==> " + a + " + " + b + " ==> " + sum);
        }
    }
}

Output:
Sum of the digits of 23 ==> 2 + 3 ==> 5
Sum of the digits of 54 ==> 5 + 4 ==> 9
Sum of the digits of 33 ==> 3 + 3 ==> 6
Sum of the digits of 44 ==> 4 + 4 ==> 8
Sum of the digits of 81 ==> 8 + 1 ==> 9
Sum of the digits of 14 ==> 1 + 4 ==> 5


**TASK3**
c/=2, e%=2

class CompoundAssignmentOperator
{
	public static void main(String args[])
	{
	int b=5;
	int c=10;
    b%=2;//b=b%2
    System.out.println(b);
    c/=2;//c=c/2
    System.out.println(c);
	}
	}
OUTPUT:
1
5

**TASK4**
decrement optr - demo


class DecrementOperator
{
	public static void main (String args[])
	{
	int a = 5;
	 int b = 3;
    System.out.println(a--);      //post-decreament here a value is 5
    System.out.println(a-- + a--);  // [ 4 + 3 = 7] output = 7
    System.out.println(a-- - a--); // [6-5=1] output=1
    System.out.println(--b);       // pre-decrementÂ [1-3]=-2

}
}

OUTPUT:
5
7
1
-2

